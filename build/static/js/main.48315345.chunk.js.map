{"version":3,"sources":["Services/index.ts","Components/Chart/Nivo/BarChart.tsx","Components/Chart/Nivo/QuantileChart.tsx","Components/Chart/NivoChart.tsx","Components/DynamicTable.tsx","Components/Loading.tsx","Components/DynamicDataLoader.tsx","Assets/images/banner3.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["trainDataSet","testDataSet","configColumns","numericFilter","value","NaN","Number","toFixed","readJson","type","index","rowLabel","trainStats","testStats","trainHistogram","testHistogram","trainTopValues","testTopValues","trainCommonStats","testCommonStats","histogram","singleObject","setTrainData","features","name","num_stats","histograms","string_stats","rank_histogram","top_values","common_stats","setTestData","mapObjectByLabel","col","dataSetLabel","object","key","map","trainObject","testObject","onLoadData","columns","uploadedJson","uploadedDataSet","JSON","parse","datasets","data","normalizedDataSet","normalizeData","dataSet","push","i","length","console","log","error","BarChart","featureType","width","groups","height","testColor","trainColor","expand","React","useState","loading","setLoading","setData","setError","pagination","setPagination","newValue","isNaN","undefined","generateLabel","trainDataObject","testDataObject","trainLowValue","trainHighValue","testLowValue","testHighValue","min","max","low_value","high_value","useEffect","loopDataSet","chart","trainCount","testCount","lbl","sample_count","label","train","test","onNormalizeGraphData","getPageCount","dataLength","Math","floor","style","backgroundColor","CircularProgress","disableShrink","slice","keys","indexBy","margin","top","right","bottom","left","padding","groupMode","colors","borderColor","from","modifiers","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","format","toString","sub","substring","axisLeft","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","animate","motionStiffness","motionDamping","paddingBottom","fontSize","display","justifyContent","alignItems","Pagination","count","onChange","event","memo","QuantileChart","group","setGroup","quantileCharts","id","finalObject","trainlowValue","maxTrainObject","maxTestObject","range","charts","onNormalizeData","layout","valueScale","reverse","forceStrength","simulationIterations","legendPosition","legendOffset","NivoChart","open","setOpen","modalType","setModalType","handleOpen","handleClose","SwitchChart","borderWidth","outline","cursor","onClick","buckets","Modal","onClose","aria-labelledby","aria-describedby","flexDirection","alignSelf","window","innerWidth","innerHeight","useStyles","makeStyles","theme","rowTitle","fontWeight","MuiTableCell_head","borderRight","colorBox","borderRadius","content","breakpoints","up","marginLeft","overflowX","DynamicTable","tableTitle","rows","graphConfig","classes","radios","graph","chartType","setChartType","Fragment","Typography","paddingLeft","marginRight","variant","gutterBottom","component","Paper","className","TableRow","TableCell","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","Table","size","aria-label","TableHead","displayName","FormControl","minWidth","InputLabel","Select","labelId","target","MenuItem","TableBody","row","flex","maxWidth","whiteSpace","overflow","scope","find","moduleType","Loading","visibility","dot","setDot","setTimeout","opacity","DynamicDataLoader","configData","title","state","setState","loadData","a","TabPanel","props","children","other","role","hidden","p","a11yProps","createMuiTheme","palette","primary","main","secondary","root","flexGrow","background","paper","minHeight","tabs","warning","dark","tab_header","color","textTransform","iconLabelWrapper","tabIndicator","marginTop","bannerContainer","firstSection","UploadContainer","uploadContent","LoadingScreen","App","setValue","setUploadedJson","oldJson","setOldJson","generate","setGenerate","inputRef","useRef","config","setConfig","showToast","setShowToast","onLoadConfig","fetch","then","res","json","catch","err","ThemeProvider","Grid","container","spacing","item","xs","sm","md","lg","Container","src","Banner1","TextField","fileReader","FileReader","readAsText","files","onload","e","result","accessKey","Button","disabled","current","Tabs","indicatorColor","textColor","centered","Tab","wrapper","icon","FormatListNumberedRtlOutlined","TextFormatOutlined","Check","numericConfig","stringConfig","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48315345.chunk.js","sourcesContent":["import React from 'react';\nimport { datasets } from './data.json'\n\n\n\nvar trainDataSet: any;\nvar testDataSet: any;\nvar configColumns: any;\n\n//Configs.json file is reading from the public folder\nexport const onGetConfigData = async (type: string) => {\n\n    let config: any;\n    await fetch(\"./Configs.json\")\n        .then(\n            function (res) {\n                return res.json()\n            }).then(function (data) {\n                const { numericConfig, stringConfig, booleanConfig } = data;\n                if (type === 'NUMERIC') {\n                    config = numericConfig;\n                }\n                else if (type === 'STRING') {\n                    config = stringConfig;\n                }\n                else if (type === 'BOOLEAN') {\n                    config = booleanConfig;\n                }\n            }).catch(\n                function (err) {\n                    console.log(err, ' error')\n                }\n            )\n\n    console.log('conf:', config);\n    return config;\n}\n\n\nconst numericFilter = (value: any) => {\n    value = Number(value);\n    if (value === NaN) {\n        return value;\n    }\n    else {\n        if (value > 999 && value < 1000000) {\n            value = (value / 1000).toFixed(1) + 'K';\n        } else if (value > 1000000) {\n            value = (value / 1000000).toFixed(1) + 'M';\n        }\n        else {\n            value = value.toFixed(2);\n        }\n        return value\n    }\n}\n\n/* \n    * NOTE THAT : numNonMissing => this should be missing, so in the backend side there should be a property to take missng value.\n*/\n\n\nconst readJson = (type: string, index: number) => {\n\n    let singleObject: any = {};\n    let rowLabel: any;\n    let trainStats: any;\n    let testStats: any;\n    let trainHistogram: any[];\n    let testHistogram: any[];\n    let trainTopValues: any;\n    let testTopValues: any;\n    let trainCommonStats: any;\n    let testCommonStats: any;\n    let histogram: any;\n\n    const setTrainData = () => {\n        rowLabel = trainDataSet.features[index].name;\n        singleObject = { ...singleObject, rowLabel };\n        if (type === 'NUMERIC') {\n            trainStats = trainDataSet.features[index].num_stats;\n            trainHistogram = trainStats.histograms;\n            histogram = { ...histogram, trainHistogram };\n        }\n        else if (type === 'STRING') {\n            trainStats = trainDataSet.features[index].string_stats;\n            trainHistogram = trainStats.rank_histogram;\n            trainTopValues = trainStats.top_values[0];\n            histogram = { ...histogram, trainHistogram: [trainHistogram] }; // Put this inside an array, because, by default in 'numeric' dataSet passed as array \n        }\n        trainCommonStats = trainStats.common_stats;\n\n    }\n\n    const setTestData = () => {\n        rowLabel = testDataSet.features[index].name;\n        singleObject = { ...singleObject, rowLabel }\n        if (type === 'NUMERIC') {\n            testStats = testDataSet.features[index].num_stats;\n            testHistogram = testStats.histograms;\n            histogram = { ...histogram, testHistogram };\n        }\n        else if (type === 'STRING') {\n            testStats = testDataSet.features[index].string_stats;\n            testHistogram = testStats.rank_histogram;\n            testTopValues = testStats.top_values[0];\n            histogram = { ...histogram, testHistogram: [testHistogram] }; // Put this inside an array, because, by default in 'numeric' dataSet passed as array \n        }\n        testCommonStats = testStats.common_stats;\n    }\n\n    const mapObjectByLabel = (col: any, dataSetLabel: string) => {\n        let object: any = {};\n        if (dataSetLabel === \"train_\") {\n            if (trainDataSet[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: numericFilter(trainDataSet[col.key]) };\n            }\n            else if (trainStats[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: numericFilter(trainStats[col.key]) };\n            }\n            else if (trainCommonStats[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: numericFilter(trainCommonStats[col.key]) };\n            }\n\n            else if (trainTopValues && trainTopValues[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: trainTopValues[col.key] };\n            }\n        }\n        else {\n            if (testDataSet[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: numericFilter(testDataSet[col.key]) };\n            }\n            else if (testStats[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: numericFilter(testStats[col.key]) };\n            }\n            else if (testCommonStats[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: numericFilter(testCommonStats[col.key]) };\n            }\n            else if (testTopValues && testTopValues[col.key]) {\n                object = { ...object, [dataSetLabel + col.key]: testTopValues[col.key] };\n            }\n        }\n        return object;\n    }\n\n    if (trainDataSet && testDataSet) {\n        setTrainData();\n        setTestData();\n    }\n    else if (trainDataSet) {\n        setTrainData();\n    }\n    else if (testDataSet) {\n        setTestData();\n    }\n\n    configColumns.map((col: any) => {\n        if (trainDataSet && testDataSet) {\n            let trainObject = mapObjectByLabel(col, \"train_\");\n            let testObject = mapObjectByLabel(col, \"test_\");\n            singleObject = { ...singleObject, ...trainObject, ...testObject, histogram };\n        }\n        else if (trainDataSet) {\n            let trainObject = mapObjectByLabel(col, \"train_\");\n            singleObject = { ...singleObject, ...trainObject, histogram };\n        }\n        else if (testDataSet) {\n            let testObject = mapObjectByLabel(col, \"test_\");\n            singleObject = { ...singleObject, ...testObject, histogram };\n        }\n    });\n    return singleObject;\n\n    // configColumns.map((col: any) => {\n    //     /*Count will be taken heare*/\n    //     if (trainDataSet[col.key]) {\n    //         singleObject = { ...singleObject, [\"train_\" + col.key]: numericFilter(trainDataSet[col.key]), [\"test_\" + col.key]: numericFilter(testDataSet[col.key]), histogram };\n    //     }\n    //     /*mean, min, max and etc.. will be taken heare*/\n    //     else if (trainStats[col.key]) {\n    //         singleObject = { ...singleObject, [\"train_\" + col.key]: numericFilter(trainStats[col.key]), [\"test_\" + col.key]: numericFilter(trainStats[col.key]), histogram };\n    //     }\n    //     /*non missing will be taken here*/\n    //     else if (trainCommonStats[col.key]) {\n    //         singleObject = { ...singleObject, [\"train_\" + col.key]: numericFilter(trainCommonStats[col.key]), [\"test_\" + col.key]: numericFilter(testCommonStats[col.key]), histogram };\n    //     }\n    //     else if (trainTopValues && trainTopValues[col.key]) {\n    //         singleObject = { ...singleObject, [\"train_\" + col.key]: trainTopValues[col.key], [\"test_\" + col.key]: testTopValues[col.key], histogram };\n    //     }\n    // });\n\n}\n\nexport const onLoadData = (type: string, columns: any, uploadedJson?: any) => {\n\n\n    trainDataSet = null;\n    testDataSet = null;\n\n    configColumns = columns;\n\n    try {\n        if (uploadedJson) {\n            let uploadedDataSet = JSON.parse(uploadedJson).datasets;\n            uploadedDataSet.map((data: any, index: number) => {\n                if (data.name === 'train') {\n                    trainDataSet = uploadedDataSet[index];\n                }\n                else if (data.name === 'test') {\n                    testDataSet = uploadedDataSet[index];\n                }\n            })\n            // if(uploadedDataSet.length === 2) {\n            //     trainDataSet = uploadedDataSet[0];\n            //     testDataSet = uploadedDataSet[1];\n            // }\n\n        }\n        else {\n            datasets.map((data: any, index: number) => {\n                if (data.name === 'train') {\n                    trainDataSet = datasets[index];\n                }\n                else if (data.name === 'test') {\n                    testDataSet = datasets[index];\n                }\n            });\n        }\n        let normalizedDataSet: any[] = [];\n\n\n        const normalizeData = (dataSet: any, index: number) => {\n            if (type === 'NUMERIC') {\n                if (!dataSet.features[index].type) {\n                    let singleObject: any = readJson(type, index);\n                    normalizedDataSet.push(singleObject);\n                }\n            }\n            else if (dataSet.features[index].type === type) {\n                let singleObject: any = readJson(type, index);\n                normalizedDataSet.push(singleObject);\n            }\n        }\n\n        if ((trainDataSet && testDataSet) || trainDataSet) {\n            for (let i = 0; i < trainDataSet.features.length; i++) {\n                normalizeData(trainDataSet, i);\n            }\n        }\n        else if (testDataSet) {\n            for (let i = 0; i < testDataSet.features.length; i++) {\n                normalizeData(testDataSet, i);\n            }\n        }\n\n        console.log('normalizedDataSet:', normalizedDataSet);\n\n        return normalizedDataSet\n    } catch (error) {\n        console.log('ERROR');\n        return null;\n    }\n\n\n\n}\n","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Paper } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { getPageCount } from '@material-ui/data-grid';\n\n\ninterface Props {\n    featureType: string,\n    trainDataSet: any,\n    testDataSet: any,\n    groups: string[],\n    width: number,\n    height: number,\n    testColor: string,\n    trainColor: string,\n    expand: boolean\n}\n\nconst BarChart: React.FC<Props> = ({ featureType, trainDataSet, testDataSet, groups, width, height, testColor, trainColor, expand }) => {\n\n\n    const [loading, setLoading] = React.useState<boolean>(true);\n    const [data, setData] = React.useState<any[]>([]);\n    const [error, setError] = React.useState<boolean>(false);\n    const [pagination, setPagination] = React.useState(0);\n    const [totalPage, setTotalPage] = React.useState(1);\n\n    const numericFilter = (value: any) => {\n        let newValue: any = Number(value);\n        if (isNaN(newValue)) {\n            if (value === undefined) {\n                return 0;\n            }\n            else {\n                return value;\n            }\n        }\n        else {\n            if (newValue > 999 && newValue < 1000000) {\n                newValue = (newValue / 1000).toFixed(1) + 'K';\n            } else if (newValue > 1000000) {\n                newValue = (newValue / 1000000).toFixed(1) + 'M';\n            }\n            else {\n                newValue = newValue.toFixed(2);\n            }\n            return newValue\n        }\n    }\n\n\n    const generateLabel = (trainDataObject: any, testDataObject: any) => {\n\n        let trainLowValue: any;\n        let trainHighValue: any;\n        let testLowValue: any;\n        let testHighValue: any;\n        let min: any;\n        let max: any\n        let label: any;\n\n        if (trainDataObject && testDataObject) {\n            trainLowValue = trainDataObject.low_value;\n            trainHighValue = trainDataObject.high_value;\n            testLowValue = testDataObject.low_value;\n            testHighValue = testDataObject.high_value;\n            min = (trainLowValue <= testLowValue) ? trainLowValue : testLowValue;\n            max = (trainHighValue >= testHighValue) ? trainHighValue : testHighValue;\n        }\n        else if (trainDataObject) {\n            trainLowValue = trainDataObject.low_value;\n            trainHighValue = trainDataObject.high_value;\n            min = trainLowValue;\n            max = trainHighValue;\n        }\n        else if (testDataObject) {\n            testLowValue = testDataObject.low_value;\n            testHighValue = testDataObject.high_value;\n            min = testLowValue;\n            max = testHighValue;\n        }\n\n        label = `${numericFilter(min)}-${numericFilter(max)}`\n        return label;\n    }\n\n\n\n    const onNormalizeGraphData = () => {\n        const loopDataSet = trainDataSet ? trainDataSet : testDataSet;\n        try {\n            let chart: any[] = [];\n\n            for (let i = 0; i < loopDataSet.length; i++) {\n                let singleObject: any = {};\n                let trainCount: any;\n                let testCount: any;\n\n                const setTrainData = (lbl: any) => {\n\n                    trainCount = trainDataSet[i].sample_count;\n                    singleObject = { ...singleObject, label: lbl, train: trainCount };\n                }\n\n                const setTestData = (lbl: any) => {\n                    testCount = testDataSet[i].sample_count;\n                    singleObject = { ...singleObject, label: lbl, test: testCount };\n                }\n\n                if (trainDataSet && testDataSet) {\n\n                    let label = (featureType === 'STRING') ? trainDataSet[i].label : generateLabel(trainDataSet[i], testDataSet[i]);\n                    setTrainData(label);\n                    setTestData(label);\n                }\n                else if (trainDataSet) {\n                    let label = (featureType === 'STRING') ? trainDataSet[i].label : generateLabel(trainDataSet[i], null);\n                    setTrainData(label);\n                }\n                else if (testDataSet) {\n                    let label = (featureType === 'STRING') ? testDataSet[i].label : generateLabel(null, testDataSet[i]);\n                    setTestData(label);\n                }\n\n                chart.push(singleObject);\n            }\n            setData(chart);\n            setLoading(false);\n        } catch (error) {\n            setLoading(false);\n            setError(true);\n        }\n    }\n\n    React.useEffect(() => {\n        onNormalizeGraphData();\n        getPageCount();\n    }, []);\n\n\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        let actualPages: number = value - 1;\n        let datacount: number = actualPages * 15;\n        setPagination(datacount);\n    };\n\n    const getPageCount = () => {\n        var dataLength: number = Math.floor(data.length / 15);\n        var reminder: number = data.length % 15;\n        if (reminder > 0) {\n            dataLength = dataLength + 1;\n        } else {\n            dataLength = dataLength;\n        }\n        return dataLength;\n    }\n\n\n    const getKeys = () => {\n        if (trainDataSet && testDataSet) {\n            return ['train', 'test'];\n        }\n        else if (trainDataSet) {\n            return ['train'];\n        }\n        else if (testDataSet) {\n            return ['test'];\n        }\n    }\n\n    const getColors = () => {\n        if (trainDataSet && testDataSet) {\n            return [trainColor, testColor];\n        }\n        else if (trainDataSet) {\n            return [trainColor];\n        }\n        else if (testDataSet) {\n            return [testColor];\n        }\n    }\n\n    return (\n        <>\n            <div style={{ width: width, height: height, backgroundColor: '#fff' }}>\n                {\n                    (loading) ?\n                        <CircularProgress disableShrink />\n                        :\n                        (error) ?\n                            <h4>Invalid data to visualize</h4>\n                            :\n                            <ResponsiveBar\n                                data={expand ? data.slice(0 + pagination, 15 + pagination) : data.slice(0, 10)}\n                                keys={getKeys()}\n                                indexBy=\"label\"\n                                margin={{ top: 10, right: 80, bottom: expand ? 160 : 70, left: 10 }}\n                                padding={0.5}\n                                groupMode={'grouped'}\n                                //valueScale={{ type: 'linear' }}\n                                //indexScale={{ type: 'band', round: false }}\n                                colors={getColors()}\n                                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                                axisTop={null}\n                                axisRight={null}\n                                axisBottom={{\n                                    orient: \"bottom\",\n                                    tickSize: 0,\n                                    tickPadding: 10,\n                                    tickRotation: -90,\n                                    format: function (value) {\n                                        var label = value.toString();\n                                        var sub = label.substring(0, 5);\n                                        if (expand) {\n                                            return label;\n                                        } else {\n                                            return sub + '...';\n                                        }\n\n                                    }\n\n                                }}\n                                axisLeft={null}\n                                enableLabel={false}\n                                labelSkipWidth={12}\n                                labelSkipHeight={12}\n                                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                                legends={[\n                                    {\n                                        dataFrom: 'keys',\n                                        anchor: 'bottom-right',\n                                        direction: 'column',\n                                        justify: false,\n                                        translateX: 120,\n                                        translateY: 0,\n                                        itemsSpacing: 2,\n                                        itemWidth: 100,\n                                        itemHeight: 20,\n                                        itemDirection: 'left-to-right',\n                                        itemOpacity: 0.85,\n                                        symbolSize: 20,\n                                        effects: [\n                                            {\n                                                on: 'hover',\n                                                style: {\n                                                    itemOpacity: 1\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]}\n                                animate={true}\n                                motionStiffness={90}\n                                motionDamping={15}\n                            />\n                }\n\n            </div>\n            {\n                data.length > 10 && expand === false &&\n                <div style={{ paddingBottom: 20, fontSize: 12 }}>\n                    Click to view full graph\n                </div>\n            }\n            {\n                data.length > 25 && expand === true &&\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', paddingBottom: 10, backgroundColor: '#fff' }}>\n                    <Pagination count={getPageCount()} onChange={handleChange} />\n                </div>\n            }\n        </>\n    )\n}\n\nexport default React.memo(BarChart)","import React from 'react'\nimport { datasets } from '../../../Services/SampleData2.json';\nimport { ResponsiveSwarmPlot } from '@nivo/swarmplot';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ninterface Props {\n    trainDataSet: any,\n    testDataSet: any,\n    groups: string[],\n    width: number,\n    height: number,\n    testColor: string,\n    trainColor: string\n}\n\nexport const QuantileChart: React.FC<Props> = ({ trainDataSet, testDataSet, groups, width, height, testColor, trainColor }) => {\n\n\n\n    const [loading, setLoading] = React.useState<boolean>(true);\n    const [data, setData] = React.useState<any>({});\n    const [error, setError] = React.useState<boolean>(false);\n    const [group, setGroup] = React.useState<string[]>([]);\n\n    // console.log('tr:', trainDataSet);\n    const loopDataSet = trainDataSet ? trainDataSet : testDataSet;\n    const onNormalizeData = () => {\n        try {\n            let quantileCharts: any[] = [];\n            for (let i = 0; i < loopDataSet.length; i++) {\n\n                let trainObject: any;\n                let testObject: any;\n\n                const setTrainData = () => {\n                    trainObject = { id: `0.${i}`, group: 'train', count: trainDataSet[i].low_value };\n                }\n                const setTestData = () => {\n                    testObject = { id: `1.${i}`, group: 'test', count: testDataSet[i].low_value };\n                }\n                if (trainDataSet && testDataSet) {\n                    setTrainData();\n                    setTestData();\n                    quantileCharts.push(trainObject);\n                    quantileCharts.push(testObject);\n                }\n                else if (trainDataSet) {\n                    setTrainData();\n                    quantileCharts.push(trainObject);\n                }\n                else if (testDataSet) {\n                    setTestData();\n                    quantileCharts.push(testObject);\n                }\n            }\n\n            let finalObject: any = {};\n            let trainlowValue: any = 0;\n            let testLowValue: any = 0;\n            let trainHighValue: any = 0;\n            let testHighValue: any = 0;\n\n            const setTrainData = () => {\n                trainlowValue = trainDataSet[0].low_value;\n                trainHighValue = trainDataSet[trainDataSet.length - 1].high_value;\n            }\n\n            const setTestData = () => {\n                testLowValue = testDataSet[0].low_value;\n                testHighValue = testDataSet[testDataSet.length - 1].high_value;\n            }\n\n            if (trainDataSet && testDataSet) {\n                setTrainData();\n                setTestData();\n                let min = (trainlowValue <= testLowValue) ? trainlowValue : testLowValue;\n                let max = (trainHighValue >= testHighValue) ? trainHighValue : testHighValue;\n                let maxTrainObject = { id: `0.${quantileCharts.length}`, group: 'train', count: trainHighValue };\n                let maxTestObject = { id: `1.${quantileCharts.length}`, group: 'test', count: testHighValue };\n                quantileCharts.push(maxTrainObject);\n                quantileCharts.push(maxTestObject);\n                setGroup(['train', 'test']);\n                finalObject = { range: { min, max }, charts: quantileCharts };\n                console.log('FINAL OBJECT:', finalObject);\n            }\n            else if (trainDataSet) {\n                setTrainData();\n                let min = trainlowValue;\n                let max = trainHighValue;\n                let maxTrainObject = { id: `0.${quantileCharts.length}`, group: 'train', count: trainHighValue };\n                quantileCharts.push(maxTrainObject);\n                setGroup(['train']);\n                finalObject = { range: { min, max }, charts: quantileCharts };\n            }\n            else if (testDataSet) {\n                setTestData();\n                let min = testLowValue;\n                let max = testHighValue;\n                let maxTestObject = { id: `1.${quantileCharts.length}`, group: 'test', count: testHighValue };\n                quantileCharts.push(maxTestObject);\n                setGroup(['test']);\n                finalObject = { range: { min, max }, charts: quantileCharts };\n            }\n\n\n\n\n            setLoading(false);\n            setData(finalObject);\n        } catch (error) {\n            setLoading(false);\n            setError(true);\n        }\n    }\n\n\n    React.useEffect(() => {\n        onNormalizeData();\n    }, []);\n\n    return (\n        <div style={{ width: width, height: height, backgroundColor: '#fff' }}>\n            {\n                (loading) ?\n                    <CircularProgress disableShrink />\n                    :\n                    (error) ?\n                        <h4>Invalid data to visualize</h4>\n                        :\n                        <ResponsiveSwarmPlot\n                            data={data.charts}\n                            groups={group}\n                            value=\"count\"\n                            layout=\"horizontal\"\n                            //valueFormat=\"1k\"\n                            valueScale={{ type: 'linear', min: data.range.min, max: data.range.max, reverse: false }}\n                            // size={{ key: 'volume', values: [3, 5], sizes: [5, 5] }}\n                            forceStrength={4}\n                            simulationIterations={100}\n                            colors={group[0] === 'train' ? [trainColor, testColor] : [testColor]}\n                            //colors={[trainColor, testColor]}\n                            borderColor={{\n                                from: 'color',\n                                modifiers: [\n                                    [\n                                        'darker',\n                                        0.6\n                                    ],\n                                    [\n                                        'opacity',\n                                        0.5\n                                    ]\n                                ]\n                            }}\n                            margin={{ top: 40, right: 100, bottom: 55, left: 50 }}\n                            axisBottom={{\n                                orient: 'bottom',\n                                tickSize: 10,\n                                tickPadding: 5,\n                                tickRotation: -45,\n                                legendPosition: 'middle',\n                                legendOffset: 46\n                            }}\n                            axisTop={null}\n                            motionStiffness={50}\n                            motionDamping={20}\n                        />\n            }\n        </div>\n    )\n}","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar'\nimport { datasets } from '../../Services/sampleData.json';\nimport { ResponsiveSwarmPlot } from '@nivo/swarmplot';\nimport BarChart from './Nivo/BarChart';\nimport { QuantileChart } from './Nivo/QuantileChart'\nimport Modal from '@material-ui/core/Modal';\n\n\ninterface Props {\n    featureType: string,\n    type: string,\n    histogram: any,\n    groups: string[],\n    testColor: string,\n    trainColor: string\n}\n\n\n\nconst NivoChart: React.FC<Props> = ({ featureType, histogram, type, groups, testColor, trainColor }) => {\n\n    const [open, setOpen] = React.useState(false);\n    const [modalType, setModalType] = React.useState(type);\n\n    const handleOpen = (type: string) => {\n        setModalType(type)\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n\n    function SwitchChart() {\n\n        switch (type) {\n            case 'Standard':\n                return (\n                    <button style={{ backgroundColor: '#fff', borderWidth: 0, outline: 'none', cursor: 'pointer' }} type=\"button\" onClick={() => handleOpen(type)}>\n                        <BarChart\n                            featureType={featureType}\n                            trainDataSet={histogram.trainHistogram && histogram.trainHistogram[0].buckets}\n                            testDataSet={histogram.testHistogram && histogram.testHistogram[0].buckets}\n                            groups={groups}\n                            testColor={testColor}\n                            trainColor={trainColor}\n                            expand={false}\n                            width={350}\n                            height={180} />\n                    </button>\n                )\n            case 'Quantiles':\n                return (\n                    <button style={{ backgroundColor: '#fff', borderWidth: 0, outline: 'none', cursor: 'pointer' }} type=\"button\" onClick={() => handleOpen(type)}>\n                        <QuantileChart\n                            trainDataSet={histogram.trainHistogram && histogram.trainHistogram[1].buckets}\n                            testDataSet={histogram.testHistogram && histogram.testHistogram[1].buckets}\n                            groups={groups}\n                            testColor={testColor}\n                            trainColor={trainColor}\n\n                            width={400}\n                            height={130} />\n                    </button>\n                )\n            default:\n                return (\n                    <button style={{ backgroundColor: '#fff', borderWidth: 0, outline: 'none', cursor: 'pointer' }} type=\"button\" onClick={() => handleOpen(type)}>\n                        <BarChart\n                            featureType={featureType}\n                            trainDataSet={histogram.trainHistogram && histogram.trainHistogram[0].buckets}\n                            testDataSet={histogram.testHistogram && histogram.testHistogram[0].buckets}\n                            groups={groups}\n                            testColor={testColor}\n                            trainColor={trainColor}\n                            expand={false}\n                            width={400}\n                            height={180} />\n                    </button>\n                )\n        }\n    }\n\n    return (\n        <div>\n\n            {/* {SwitchChart()} */}\n            <SwitchChart />\n\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n            >\n                <div>\n                    <div style={{ display: 'flex', flexDirection: 'row', backgroundColor: '#fff', width: '100%', justifyContent: 'flex-end' }}>\n                        <button style={{ alignSelf: 'flex-end' }} onClick={handleClose}> X </button>\n                    </div>\n                    {\n                        modalType === 'Standard' ?\n                            (\n                                <BarChart\n                                    featureType={featureType}\n                                    trainDataSet={histogram.trainHistogram && histogram.trainHistogram[0].buckets}\n                                    testDataSet={histogram.testHistogram && histogram.testHistogram[0].buckets}\n                                    groups={groups}\n                                    testColor={testColor}\n                                    trainColor={trainColor}\n                                    expand={true}\n                                    width={window.innerWidth * 0.75}\n                                    height={window.innerHeight * 0.75}\n                                />\n                            ) : (\n                                <QuantileChart\n                                    trainDataSet={histogram.trainHistogram && histogram.trainHistogram[1].buckets}\n                                    testDataSet={histogram.testHistogram && histogram.testHistogram[1].buckets}\n                                    groups={groups}\n                                    testColor={testColor}\n                                    trainColor={trainColor}\n                                    width={window.innerWidth * 0.75}\n                                    height={window.innerHeight * 0.75}\n                                />\n                            )\n                    }\n                </div>\n            </Modal>\n\n        </div>\n    );\n}\n\nexport default React.memo(NivoChart);\n\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport NivoChart from './Chart/NivoChart';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Paper } from '@material-ui/core';\ninterface Props {\n    featureType?: any\n    tableTitle?: string,\n    columns?: any,\n    rows?: any,\n    radios?: string[],\n    graph?: any[], //should have array of objects {graphType, graphStyles} \n    graphConfig?: any\n}\nconst drawerWidth = 50;\nconst useStyles = makeStyles((theme) => ({\n    rowTitle: {\n        fontSize: 14,\n        fontWeight: 600,\n        padding: 10,\n    },\n    MuiTableCell_head: {\n        backgroundColor: '#f3edd2',\n        borderRight: 2,\n    },\n    colorBox: {\n        display: \"inline-block\",\n        borderRadius: \"50%\",\n        width: 10,\n        height: 10,\n        left: 0,\n        top: 0,\n        //marginTop: 10,\n    },\n    content: {\n        [theme.breakpoints.up(\"sm\")]: {\n            marginLeft: drawerWidth,\n            width: `calc(100% - ${drawerWidth}px)`\n        }\n    },\n    overflowX: {\n        overflowX: 'scroll'\n    }\n}));\n\nconst DynamicTable: React.FC<Props> = ({ featureType, tableTitle, columns, rows, graphConfig, radios, graph }) => {\n    const classes = useStyles();\n    const [chartType, setChartType] = useState('Standard');\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setChartType(event.target.value as string);\n    };\n\n\n\n    return (\n        <React.Fragment>\n            <Typography style={{ backgroundColor: '#FAB75A', paddingLeft: 20, marginLeft: 10, marginRight: 10 }} variant=\"h6\" gutterBottom component=\"div\" >\n                {tableTitle}\n            </Typography>\n\n            <Paper className=\"table_container\">\n                <TableRow>\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\n                            <Box margin={1}>\n\n                                <Table size=\"small\" aria-label=\"purchases\">\n                                    <TableHead className={classes.MuiTableCell_head}>\n                                        <TableRow>\n                                            <TableCell>\n                                                <TableRow>\n                                                    <TableCell className=\"tableTitle\"></TableCell>\n                                                    {\n                                                        columns?.map((col: any) => <TableCell key={col.key} style={{ width: 100 }}>{col.displayName}</TableCell>)\n                                                    }\n                                                </TableRow>\n                                            </TableCell>\n                                            <TableCell>\n                                                <FormControl style={{ marginLeft: 30, minWidth: 200, }}>\n                                                    <InputLabel id=\"demo-simple-select-label\">Chart to Show</InputLabel>\n                                                    <Select\n                                                        labelId=\"demo-simple-select-label\"\n                                                        id=\"demo-simple-select\"\n                                                        value={chartType}\n                                                        onChange={handleChange}\n                                                    >\n                                                        {\n                                                            graphConfig?.map((data: any) =>\n                                                                <MenuItem key={data.chartType} value={data.chartType}>{data.chartType}</MenuItem>\n                                                            )\n                                                        }\n                                                    </Select>\n                                                </FormControl>\n                                            </TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody >\n                                        {rows.map((row: any, index: number) => (\n                                            <>\n                                                <TableRow key={index.toString()}>\n                                                    <TableCell>\n                                                        <TableRow>\n                                                            <Typography variant=\"h6\" gutterBottom component=\"div\" className={classes.rowTitle}>\n                                                                {row.rowLabel}\n                                                            </Typography>\n                                                        </TableRow>\n                                                        {\n                                                            row.histogram.trainHistogram &&\n                                                            <TableRow>\n\n                                                                <TableCell className=\"tableTitle\">\n                                                                    <div style={{ display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start' }}>\n                                                                        <span className={classes.colorBox} style={{ backgroundColor: '#1B83CC' }} />\n                                                                        <Typography component=\"text\">\n                                                                            Train\n                                                                        </Typography>\n                                                                    </div>\n                                                                </TableCell>\n\n\n                                                                {\n                                                                    columns.map((col: any, i: number) =>\n                                                                        <TableCell key={col.key} style={{ width: 100, maxWidth: 100, whiteSpace: 'nowrap', overflow: 'hidden' }} component=\"th\" scope=\"row\">\n                                                                            {row[\"train_\" + columns[i].key]}\n                                                                        </TableCell>\n                                                                    )\n                                                                }\n                                                            </TableRow>\n\n                                                        }\n\n                                                        {\n                                                            row.histogram.testHistogram &&\n                                                            <TableRow>\n\n                                                                <TableCell className=\"tableTitle\">\n                                                                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start' }}>\n                                                                        <span className={classes.colorBox} style={{ backgroundColor: '#E3C514' }}></span>\n                                                                        <Typography component=\"text\">\n                                                                            Test\n                                                                        </Typography>\n                                                                    </div>\n                                                                </TableCell>\n\n\n                                                                {\n                                                                    columns.map((col: any, i: number) =>\n                                                                        <TableCell key={col.key} style={{ width: 100 }} component=\"th\" scope=\"row\">\n                                                                            {row[\"test_\" + columns[i].key]}\n                                                                        </TableCell>\n                                                                    )\n                                                                }\n                                                            </TableRow>\n                                                        }\n\n                                                    </TableCell>\n                                                    <TableCell>\n                                                        {\n                                                            (graphConfig.find((data: any) => data.chartType === chartType).moduleType === 'nivo') &&\n                                                            <NivoChart\n                                                                featureType={featureType}\n                                                                histogram={row.histogram}\n                                                                groups={[]}\n                                                                type={chartType}\n                                                                testColor={graphConfig.find((data: any) => data.chartType === chartType).style.trainColor}\n                                                                trainColor={graphConfig.find((data: any) => data.chartType === chartType).style.testColor}\n                                                            />\n                                                        }\n\n                                                    </TableCell>\n                                                </TableRow>\n                                            </>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n            </Paper>\n        </React.Fragment >\n    )\n}\n\nexport default React.memo(DynamicTable);","import React from 'react';\n\ninterface Props {\n    visibility: boolean\n}\n\nconst Loading: React.FC<Props> = ({ visibility }) => {\n\n    const [dot, setDot] = React.useState<number>(0);\n\n    React.useEffect(() => {\n        if (visibility) {\n            setTimeout(() => {\n                if (dot === 0) {\n                    setDot(1);\n                }\n                else if (dot === 1) {\n                    setDot(2)\n                }\n                else if (dot === 2) {\n                    setDot(0);\n                }\n            }, 300);\n        }\n    }, [visibility, dot])\n\n    return (\n        <div className=\"lds-ellipsis\">\n            <div style={{ opacity: dot === 0 ? 0.5 : 1 }}></div>\n            <div style={{ opacity: dot === 1 ? 0.5 : 1 }}></div>\n            <div style={{ opacity: dot === 2 ? 0.5 : 1 }}></div>\n        </div>\n    )\n\n}\n\nexport default React.memo(Loading);\n","import React from 'react';\nimport { onLoadData, onGetConfigData } from '../Services';\nimport DynamicTable from './DynamicTable';\nimport Loading from './Loading';\n\ninterface Props {\n  featureType: string,\n  uploadedJson?: any,\n  configData?: any,\n}\n\nconst DynamicDataLoader: React.FC<Props> = ({ featureType, uploadedJson, configData }) => {\n  const [state, setState] = React.useState<any>({ loading: true, title: '', columns: [], rows: [], graphConfig: [], error: false });\n  const loadData = async () => {\n    // let configData = await onGetConfigData(featureType);\n    setState({ ...state, loading: true })\n    let rows = await onLoadData(featureType, configData?.columns, uploadedJson);\n    if (rows) {\n      setState({ ...state, loading: false, title: configData?.title, columns: configData?.columns, rows: rows, graphConfig: configData?.graphConfig, error: false });\n    }\n    else {\n      setState({ ...state, loading: false, error: true });\n    }\n  }\n\n  React.useEffect(() => {\n    loadData();\n  }, [uploadedJson]);\n\n\n\n\n  return (\n    <div>\n      {\n        (state.loading) ?\n          // <h1>Loading...</h1>\n          <Loading visibility={state.loading} />\n          :\n          (state.error) ?\n            <h1>Invalid file to process</h1>\n            :\n\n\n            <DynamicTable\n              tableTitle={state.title}\n              columns={state.columns}\n              rows={state.rows}\n              graphConfig={state.graphConfig}\n              featureType={featureType}\n            />\n\n\n      }\n    </div>\n  )\n}\n\nexport default React.memo(DynamicDataLoader);","export default __webpack_public_path__ + \"static/media/banner3.dff8df54.png\";","import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { datasets } from './Services/data.json';\nimport { NUMERIC_FEATURES, PERCENTAGES, QUANTILES, STANDARD, EXPAND, COUNT, MISSING, MEAN, STD_DEV, ZEROS, MIN, MEDIAN, MAX } from './Constants';\nimport { onLoadData, onGetConfigData } from './Services';\nimport DynamicTable from './Components/DynamicTable';\nimport { makeStyles, Theme, ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport DynamicDataLoader from './Components/DynamicDataLoader';\nimport CategoricalFeatures from './Screens/CategoricalFeatures';\nimport { AccessAlarm, ThreeDRotation, FormatListNumberedRtlOutlined, TextFormatOutlined, Check } from '@material-ui/icons';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport { Button, CardContent, CircularProgress, Container, Grid, Hidden, Paper, TextField } from '@material-ui/core';\nimport Banner1 from './Assets/images/banner3.png';\nimport Snackbar from '@material-ui/core/Snackbar';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#FAB75A\",\n    },\n    secondary: {\n      main: '#FAB75A',\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    minHeight: \"auto\",\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden'\n  },\n\n  tabs: {\n    borderRight: `1px solid ${theme.palette.warning.dark}`,\n  },\n\n  tab_header: {\n    flex: 1,\n    color: '#ebebeb',\n    fontSize: '1.6vh',\n    flexDirection: 'row',\n    textTransform: 'none',\n    alignSelf: 'flex-start',\n    fontWeight: 'bold',\n  },\n  iconLabelWrapper: {\n    flexDirection: 'row',\n\n  },\n  tabIndicator: {\n    flexGrow: 1,\n    marginLeft: '8%',\n    marginRight: '8%',\n    marginTop: 100\n  },\n  bannerContainer: {\n    backgroundColor: '#FAB75A',\n  },\n  firstSection: {\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#f4f4f4',\n    alignItems: 'center',\n    justifyContent: 'space-around'\n  },\n  UploadContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 50,\n    marginLeft: '15%',\n    marginRight: '15%',\n  },\n  uploadContent: {\n    display: 'flex',\n    flexGrow: 1,\n    flexDirection: 'row',\n    width: '100%',\n    paddingTop: 40,\n    justifyContent: 'center'\n  },\n  LoadingScreen: {\n    display: 'flex',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: window.innerHeight\n  }\n}, { index: 1 });\n\n/* Consider this is 1t tab view */\nfunction App() {\n  //read config here\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [uploadedJson, setUploadedJson] = React.useState(null);\n  const [oldJson, setOldJson] = React.useState(null);\n  const [generate, setGenerate] = React.useState<boolean>(false)\n  const inputRef: any = useRef(null);\n  const [config, setConfig] = React.useState<any>(null);\n  const [showToast, setShowToast] = React.useState(false);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const onChange = (event: any) => {\n    setGenerate(false);\n    setOldJson(uploadedJson);\n    const fileReader = new FileReader();\n    fileReader.readAsText(event.target.files[0], \"UTF-8\");\n    fileReader.onload = (e: any) => {\n      setUploadedJson(e.target.result);\n    };\n  }\n\n  const onGenerate = () => {\n    setGenerate(true);\n    setShowToast(true);\n    setTimeout(() => {\n      setShowToast(false);\n    }, 3000);\n  }\n\n  const onClear = () => {\n    setTimeout(() => {\n      inputRef.current.value = \"\";\n      setGenerate(false);\n      setUploadedJson(null);\n      setOldJson(null);\n    }, 100);\n  }\n\n  const onLoadConfig = async () => {\n\n    await fetch(\"./Configs.json\")\n      .then(\n        function (res) {\n          return res.json()\n        }).then(function (data) {\n          // const { numericConfig, stringConfig, booleanConfig } = data;\n          setConfig(data)\n          console.log('Config Data: ', config)\n\n        }).catch(\n          function (err) {\n            console.log(err, ' error')\n          }\n        )\n  }\n\n  useEffect(() => {\n    onLoadConfig();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      {\n        !config ?\n          <div className={classes.LoadingScreen}>\n            <CircularProgress />\n          </div>\n          :\n          <div style={{ flexGrow: 1 }}>\n            <div className=\"example-card-container mb-4-spacing\">\n              <div className=\"container\" style={{ backgroundColor: '#FAB75A' }}>\n                <Grid container spacing={7} alignItems=\"center\" justify=\"space-between\">\n                  <Grid item xs={12} sm={12} md={6} lg={6} alignItems=\"center\" justify=\"flex-start\">\n                    <Container maxWidth='sm'>\n                      <Typography variant=\"h4\" component=\"h3\">\n                        FACETS - KNOW YOUR DATA\n                </Typography>\n                      <div>\n                        <Typography style={{ marginTop: 10 }} color={\"textSecondary\"} variant=\"body1\" gutterBottom>\n                          The power of machine learning comes from its ability to learn patterns from large amounts of data. Understanding your data is critical to building a powerful machine learning system.\n                   </Typography>\n\n                        <Typography style={{ marginTop: 10 }} color={\"textSecondary\"} variant=\"body1\" gutterBottom>\n                          Facets contains two robust visualizations to aid in understanding and analyzing machine learning datasets. Get a sense of the shape of each feature of your dataset using Facets Overview, or explore individual observations using Facets Dive.\n                  </Typography>\n                      </div>\n                    </Container>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6} lg={6} alignItems=\"center\" justify=\"center\">\n                    <Container maxWidth='sm'>\n                      <img\n                        src={Banner1}\n                        width={'80%'}\n                        height={'auto'}\n                      />\n                    </Container>\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n            <div className=\"example-card-container p-10 mb-10-spacing\">\n              <div className=\"container\" style={{ backgroundColor: '#F4F4F4', paddingTop: 80, paddingBottom: 80 }}>\n                <Grid container spacing={7} alignItems=\"center\" >\n                  <Grid item xs={12} sm={12} md={6} lg={6} alignItems=\"center\" justify=\"flex-start\">\n                    <Container maxWidth='sm'>\n                      <Typography variant=\"h4\" component=\"h3\">\n                        FACETS OVERVIEW\n                </Typography>\n                      <Typography color={\"textSecondary\"} style={{ marginTop: 20 }} variant=\"h5\" component=\"h3\">\n                        Overview takes input feature data from any number of datasets, analyzes them feature by feature and visualizes the analysis.\n                </Typography>\n                    </Container>\n                  </Grid>\n                  <Grid item xs={12} sm={12} md={6} lg={6} alignItems=\"center\" justify=\"flex-start\">\n                    <Container maxWidth='sm'>\n                      <Typography style={{ marginTop: 10 }} color={\"textSecondary\"} variant=\"body1\" gutterBottom>\n                        Overview gives users a quick understanding of the distribution of values across the features of their dataset(s). Uncover several uncommon and common issues such as unexpected feature values, missing feature values for a large number of observation, training/serving skew and train/test/validation set skew.\n                </Typography>\n                    </Container>\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n            <div className=\"example-card-container p-10 mb-5-spacing\">\n              <div className=\"container\" style={{ backgroundColor: '#FFFFFF' }}>\n                <div className={classes.uploadContent} id=\"uploadGroup\">\n                  <TextField inputRef={inputRef} onChange={onChange} accessKey=\"application/json\" type='file' id=\"outlined-basic\" variant=\"outlined\" />\n                  <Button id=\"buttonGroup\" style={{ marginLeft: 30 }} onClick={onGenerate} disabled={uploadedJson ? false : true} variant=\"contained\" color=\"primary\" >\n                    Generate Facets Overview\n            </Button>\n                  <Button id=\"buttonGroup\" style={{ marginLeft: 30 }} onClick={onClear} disabled={generate ? false : true} variant=\"contained\" color=\"inherit\" >\n                    Clear\n            </Button>\n                </div>\n              </div>\n            </div>\n            <Paper className={classes.tabIndicator}>\n              <Tabs\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Horizontal tabs example\"\n                className={classes.tabs}\n                style={{ backgroundColor: '#141e28', width: \"100%\", borderRadius: 10, justifyContent: 'space-between' }}\n                indicatorColor=\"primary\"\n                textColor=\"secondary\"\n                centered\n              >\n                <Tab label=\"Numeric Features\" classes={{ wrapper: classes.iconLabelWrapper }}\n                  icon={<FormatListNumberedRtlOutlined style={{ marginRight: 10 }} />} {...a11yProps(0)} className={classes.tab_header}\n                />\n\n                <Tab label=\"Categorical Features\" classes={{ wrapper: classes.iconLabelWrapper }}\n                  icon={<TextFormatOutlined style={{ marginRight: 10 }} />} {...a11yProps(1)} className={classes.tab_header}\n                />\n                <Tab label=\"Boolean Features\" classes={{ wrapper: classes.iconLabelWrapper }}\n                  icon={<Check style={{ marginRight: 10 }} />} {...a11yProps(2)} className={classes.tab_header}\n                />\n              </Tabs>\n            </Paper>\n            <div className={classes.root}>\n              <TabPanel value={value} index={0}>\n                <Container maxWidth=\"lg\">\n                  <DynamicDataLoader featureType={'NUMERIC'} uploadedJson={generate ? uploadedJson : oldJson} configData={config.numericConfig} />\n                </Container>\n              </TabPanel>\n              <TabPanel value={value} index={1}>\n                <Container maxWidth=\"lg\">\n                  <DynamicDataLoader featureType={'STRING'} uploadedJson={generate ? uploadedJson : oldJson} configData={config.stringConfig} />\n                </Container>\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <Container maxWidth=\"lg\">\n                  In development\n                </Container>\n              </TabPanel>\n\n            </div>\n            <Snackbar\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              autoHideDuration={3000}\n              open={uploadedJson ? showToast : false}\n              message=\"Facet Overview generated successfully\"\n              key={1}\n            />\n          </div>\n      }\n\n    </ThemeProvider >\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}